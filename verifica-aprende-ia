import torch
import torch.nn as nn
import torch.optim as optim
import torchvision.transforms as transforms
import torchvision.models as models
from PIL import Image
import gradio as gr
import numpy as np

# Carregar modelo pré-treinado
model = models.resnet18(pretrained=True)
model.fc = nn.Linear(model.fc.in_features, 1000)  # Ajustar para suas classes

# Definir transformações
transform = transforms.Compose([  
    transforms.Resize(256),
    transforms.CenterCrop(224),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])

# Função para analisar a imagem
def analisar_imagem(imagem):
    img = Image.fromarray(imagem.astype('uint8'), 'RGB')
    img_tensor = transform(img).unsqueeze(0)
    
    with torch.no_grad():
        output = model(img_tensor)
    
    _, predicted = torch.max(output, 1)
    
    return f"A imagem parece ser da classe: {predicted.item()}"

# Função para treinar o modelo com várias imagens e rótulos
def treinar_modelo(imagens, rotulos):
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.SGD(model.parameters(), lr=0.001, momentum=0.9)
    
    model.train()  # Colocar o modelo em modo de treinamento

    rotulos = list(map(int, rotulos.split(',')))  # Converter rótulos para inteiros

    for img_file, rotulo in zip(imagens, rotulos):
        img = Image.open(img_file).convert("RGB")  # Abrir imagem com PIL
        img_tensor = transform(img).unsqueeze(0)
        
        optimizer.zero_grad()
        outputs = model(img_tensor)
        loss = criterion(outputs, torch.tensor([rotulo]))
        loss.backward()
        optimizer.step()

    return "Treinamento concluído com sucesso!"

# Criar interface Gradio para analisar uma única imagem
iface_analisar = gr.Interface(
    fn=analisar_imagem,
    inputs=gr.Image(type="numpy"),
    outputs="text",
    title="Analisador de Imagens",
    description="Anexe uma imagem para analisar seu conteúdo."
)

# Criar interface Gradio para treinar o modelo com várias imagens
iface_treinar = gr.Interface(
    fn=treinar_modelo,
    inputs=[gr.File(file_count="multiple", label="Imagens"),
            gr.Textbox(label="Rótulos (separados por vírgula)")],
    outputs="text",
    title="Treinamento de Imagens",
    description="Anexe várias imagens e forneça os rótulos correspondentes para treinar o modelo."
)

# Combinar interfaces em uma única aplicação Gradio
iface = gr.TabbedInterface([iface_analisar, iface_treinar], ["Analisar Imagem", "Treinar Modelo"])

# Lançar a interface
iface.launch()
